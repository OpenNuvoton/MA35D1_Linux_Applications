cmake_minimum_required(VERSION 2.6)

project(objectDetect)

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_SRC}")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_FLATBUF_HEADER}")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/${OPENCV_INSTALL}/include/opencv4")

link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_BUILD}")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_BUILD}/_deps/fft2d-build")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_BUILD}/_deps/ruy-build/ruy")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_BUILD}/_deps/farmhash-build")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_BUILD}/_deps/flatbuffers-build")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_BUILD}/_deps/xnnpack-build")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_BUILD}/pthreadpool")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_BUILD}/_deps/cpuinfo-build")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${TF_BUILD}/_deps/clog-build")
link_directories("${CMAKE_CURRENT_SOURCE_DIR}/${OPENCV_INSTALL}/lib")


add_executable(objectDetect main.cc ObjectDetModel.cc YoloPostProcessing.cc PlatformMath.cc)

target_link_libraries(objectDetect tensorflow-lite)

target_link_libraries(objectDetect ruy_context)
target_link_libraries(objectDetect ruy_context_get_ctx)
if(AARCH64)
target_link_libraries(objectDetect ruy_pack_arm)
else()
target_link_libraries(objectDetect ruy_pack_avx2_fma)
target_link_libraries(objectDetect ruy_pack_avx512)
target_link_libraries(objectDetect ruy_pack_avx)
endif(AARCH64)
target_link_libraries(objectDetect ruy_allocator)
target_link_libraries(objectDetect ruy_apply_multiplier)
target_link_libraries(objectDetect ruy_denormal)
target_link_libraries(objectDetect ruy_frontend)
target_link_libraries(objectDetect ruy_prepare_packed_matrices)
target_link_libraries(objectDetect ruy_system_aligned_alloc)
if(AARCH64)
target_link_libraries(objectDetect ruy_kernel_arm)
else()
target_link_libraries(objectDetect ruy_kernel_avx2_fma)
target_link_libraries(objectDetect ruy_kernel_avx512)
target_link_libraries(objectDetect ruy_kernel_avx)
target_link_libraries(objectDetect ruy_pack_avx)
endif(AARCH64)
target_link_libraries(objectDetect ruy_trmul)
target_link_libraries(objectDetect ruy_tune)
target_link_libraries(objectDetect ruy_block_map)
target_link_libraries(objectDetect ruy_cpuinfo)
target_link_libraries(objectDetect ruy_thread_pool)
target_link_libraries(objectDetect ruy_blocking_counter)
target_link_libraries(objectDetect ruy_wait)
target_link_libraries(objectDetect ruy_ctx)
target_link_libraries(objectDetect ruy_prepacked_cache)
if(AARCH64)
else()
target_link_libraries(objectDetect ruy_have_built_path_for_avx)
target_link_libraries(objectDetect ruy_have_built_path_for_avx2_fma)
target_link_libraries(objectDetect ruy_have_built_path_for_avx512)
endif(AARCH64)

target_link_libraries(objectDetect fft2d_fftsg2d)
target_link_libraries(objectDetect fft2d_fftsg)
target_link_libraries(objectDetect pthread)
target_link_libraries(objectDetect dl)
target_link_libraries(objectDetect farmhash)
target_link_libraries(objectDetect flatbuffers)
target_link_libraries(objectDetect XNNPACK)
target_link_libraries(objectDetect pthreadpool)
target_link_libraries(objectDetect cpuinfo)
target_link_libraries(objectDetect clog)

target_link_libraries(objectDetect opencv_video)
target_link_libraries(objectDetect opencv_core)
target_link_libraries(objectDetect opencv_imgproc)
target_link_libraries(objectDetect opencv_gapi)
target_link_libraries(objectDetect opencv_features2d)
target_link_libraries(objectDetect opencv_calib3d)
target_link_libraries(objectDetect opencv_objdetect)
target_link_libraries(objectDetect opencv_highgui)
target_link_libraries(objectDetect opencv_imgcodecs)
target_link_libraries(objectDetect opencv_videoio)
target_link_libraries(objectDetect opencv_flann)
